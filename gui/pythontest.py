# Form implementation generated from reading ui file 'main_chatWIndow.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
import json
import sys
import threading

from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtCore import Qt
from PyQt6.QtGui import QPalette, QColor, QTextCursor
from PyQt6.QtWidgets import QApplication, QMessageBox, QMainWindow

import net.networkmanager
from gui import changeNameWindow
from settings import settings


class MainChatWindow:

    def __init__(self):
        super().__init__()

        self.thread_state = True

        self.app = QApplication(sys.argv)
        self.window = QMainWindow()

        # self.window.setObjectName("window")
        self.window.resize(1026, 675)
        self.window.setMinimumSize(QtCore.QSize(838, 0))
        self.window.setMaximumSize(QtCore.QSize(4048, 4048))

        # load events
        self.window.closeEvent = self.onCloseEvent

        # load widgets / ui
        self.__loadWidgets()
        self.__loadMenuWidgets()
        self.__loadStatusWidgets()

        # load translation
        self.__loadTranslation()

        print("1")
        # change the ui theme
        self.doChangeThemeColor()

        print("2")
        # start the thread for pulling messages
        # self.__loadThreading()

        print("3")
        # show view
        self.window.show()

        sys.exit(self.app.exec())

    def __loadWidgets(self):
        self.central_widget = QtWidgets.QWidget(parent=self.window)
        self.central_widget.setObjectName("centralwidget")

        self.gridLayout_3 = QtWidgets.QGridLayout(self.central_widget)
        self.gridLayout_3.setObjectName("gridLayout_3")

        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")

        self.userChat = QtWidgets.QLineEdit(parent=self.central_widget)
        self.userChat.setObjectName("userChat")
        self.gridLayout.addWidget(self.userChat, 1, 0, 1, 2)
        self.userChat.returnPressed.connect(self.onSendingEvent)

        self.chatButton = QtWidgets.QPushButton(parent=self.central_widget)
        self.chatButton.setAutoDefault(True)
        self.chatButton.setObjectName("chatButton")
        self.gridLayout.addWidget(self.chatButton, 1, 2, 1, 1)
        self.chatButton.clicked.connect(self.onSendingEvent)

        self.userList = QtWidgets.QListView(parent=self.central_widget)
        self.userList.setObjectName("userList")
        self.gridLayout.addWidget(self.userList, 0, 1, 1, 2)

        self.chatBox = QtWidgets.QTextBrowser(parent=self.central_widget)
        self.chatBox.setObjectName("chatBox")
        self.gridLayout.addWidget(self.chatBox, 0, 0, 1, 1)
        self.gridLayout_3.addLayout(self.gridLayout, 0, 0, 1, 1)

        # Set Widgets to the main window
        self.window.setCentralWidget(self.central_widget)

    def __loadMenuWidgets(self):
        # menu bar
        self.menubar = QtWidgets.QMenuBar(parent=self.window)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1026, 26))
        self.menubar.setObjectName("menubar")
        # menu file
        self.menuDatei = QtWidgets.QMenu(parent=self.menubar)
        self.menuDatei.setObjectName("menuDatei")
        # menu settings
        self.menuEinstellung = QtWidgets.QMenu(parent=self.menubar)
        self.menuEinstellung.setObjectName("menuEinstellung")

        # menu end
        self.menuBeenden = QtWidgets.QMenu(parent=self.menubar)
        self.menuBeenden.setObjectName("menuBeenden")

        # menu view
        self.menuAnsicht = QtWidgets.QMenu(parent=self.menubar)
        self.menuAnsicht.setObjectName("menuAnsicht")
        self.window.setMenuBar(self.menubar)

    def __loadStatusWidgets(self):
        # status bar
        self.statusbar = QtWidgets.QStatusBar(parent=self.window)
        self.statusbar.setObjectName("statusbar")
        self.window.setStatusBar(self.statusbar)

        # change name
        self.changeName = QtGui.QAction(parent=self.window)
        self.changeName.setObjectName("changeName")
        self.changeName.triggered.connect(self.onOpenChangeName)

        # focus window
        self.focusWindow = QtGui.QAction(parent=self.window)
        self.focusWindow.setCheckable(True)
        self.focusWindow.setObjectName("focusWindow")

        # dark mode
        self.darkMode = QtGui.QAction(parent=self.window)
        self.darkMode.setCheckable(True)
        self.darkMode.setObjectName("darkMode")
        self.darkMode.triggered.connect(self.doSwitchTheme)

        # add actions to the corresponding menu widget/item
        self.menuEinstellung.addAction(self.changeName)
        self.menuEinstellung.addAction(self.changeName)
        self.menuAnsicht.addAction(self.focusWindow)
        self.menuAnsicht.addAction(self.darkMode)

        # load actions
        self.menubar.addAction(self.menuDatei.menuAction())
        self.menubar.addAction(self.menuAnsicht.menuAction())
        self.menubar.addAction(self.menuEinstellung.menuAction())
        self.menubar.addAction(self.menuBeenden.menuAction())

    def __loadThreading(self):
        self.message_thread = threading.Thread(target=messageThread(self))
        self.message_thread.start()

    def __loadTranslation(self):
        _translate = QtCore.QCoreApplication.translate
        self.window.setWindowTitle(_translate("MainWindow", "FlowChatPy"))
        self.chatButton.setText(_translate("MainWindow", "Senden"))
        self.menuDatei.setTitle(_translate("MainWindow", "Datei"))
        self.menuEinstellung.setTitle(_translate("MainWindow", "Einstellung"))
        self.menuBeenden.setTitle(_translate("MainWindow", "Beenden"))
        self.menuAnsicht.setTitle(_translate("MainWindow", "Ansicht"))
        self.changeName.setText(_translate("MainWindow", "Namen Ã¤ndern"))
        self.focusWindow.setText(_translate("MainWindow", "Fenster Fokusieren"))
        self.darkMode.setText(_translate("MainWindow", "Darkmode"))

    def onOpenChangeName(self):
        changeNameWindow.ChangeNameWindow = changeNameWindow.ChangeNameWindow()

    def doChangeThemeColor(self):
        palette = QPalette()
        # dark mode on
        if settings.settingsInstance.dark_mode:
            palette.setColor(QPalette.ColorRole.Window, QColor(48, 48, 45))
            palette.setColor(QPalette.ColorRole.Base, Qt.GlobalColor.black)
            palette.setColor(QPalette.ColorRole.Text, QColor(0, 255, 0))
            palette.setColor(QPalette.ColorRole.ButtonText, Qt.GlobalColor.black)
        else:
            # dark mode off
            palette.setColor(QPalette.ColorRole.Window, Qt.GlobalColor.lightGray)
            palette.setColor(QPalette.ColorRole.Base, Qt.GlobalColor.white)
            palette.setColor(QPalette.ColorRole.Text, Qt.GlobalColor.black)
            palette.setColor(QPalette.ColorRole.ButtonText, Qt.GlobalColor.black)
        # setting the palette to the "app" / window
        self.app.setPalette(palette)

    def doSwitchTheme(self):
        # setting the opposite of the boolean value
        self.darkMode.setChecked(not self.darkMode.isChecked())

        # saving the changed setting
        settings.settingsInstance.dark_mode = self.darkMode.isChecked()
        settings.settingsInstance.save()

        # change color
        self.doChangeThemeColor()

    def onSendingEvent(self):
        net.networkmanager.send_message(self.userChat.text())
        self.userChat.setText("")

    def onCloseEvent(self, event):
        closeMessageBox = QMessageBox()

        reply = closeMessageBox.question(self.window, "Window Close", "Do you want to quit?",
                                         closeMessageBox.standardButtons().Yes, closeMessageBox.standardButtons().No)
        # confirmation box
        if reply == closeMessageBox.standardButtons().Yes:
            event.accept()

            # closing sockets
            net.networkmanager.on_closing()

            # stops all threads and shuts down the application on close
            self.thread_state = False
            self.window.close()
            # os._exit(0)
        else:
            event.ignore()


def messageThread(window):
    updateTime = 0
    while window.thread_state:
        # interval time (testing)
        updateTime += 1
        if updateTime % 50 != 0:
            continue
        updateTime = 0
        print(updateTime)
        # In case new messages are found in the message_queue:
        if net.networkmanager.message_queue:
            for payload in net.networkmanager.message_queue:

                # Get message payload
                payload = json.loads(payload)
                if "type" in payload is None:
                    continue
                #
                payload_type = payload["type"]
                message = None

                #
                if payload_type == "customMessage":
                    message = payload["message"]

                # format the payload to print as a readable message format
                if payload_type == "userMessage":
                    message = payload["date"] + payload["name"] + " : " + payload["message"]

                if message is not None and payload["message"] != "":
                    window.chatBox.append(message)

                    # Scrolled automatisch zu einer neuen Nachricht
                    window.chatBox.moveCursor(QTextCursor.MoveOperation.End)

                # remove message from message_queue
                net.networkmanager.message_queue.remove(payload)
